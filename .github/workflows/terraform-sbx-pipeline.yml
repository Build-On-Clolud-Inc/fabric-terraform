name: 'terraform-sbx-pipeline'

on:
  push:
    branches:
    - sbx
  pull_request:

permissions:
      id-token: write
      contents: write
      pull-requests: write

jobs:
  terraform-deploy:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest
    environment: sbx

    defaults:
      run:
        shell: bash

    env:
      FABRIC_CLIENT_ID: ${{ secrets.FABRIC_CLIENT_ID }}
      FABRIC_TENANT_ID: ${{ secrets.FABRIC_TENANT_ID }}
      FABRIC_USE_OIDC: ${{ secrets.FABRIC_USE_OIDC }}


    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - uses: hashicorp/setup-terraform@v3

    # - name: 'Az CLI login'
    #   uses: azure/login@v1
    #   with:
    #     FABRIC_CLIENT_ID: ${{ secrets.FABRIC_CLIENT_ID }}
    #     FABRIC_TENANT_ID: ${{ secrets.FABRIC_TENANT_ID }}
    #     FABRIC_USE_OIDC: ${{ secrets.FABRIC_USE_OIDC }}
  
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -var-file=config/nonprod/sbx.tfvars -out=tfplan
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })      

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
        
    - name: Terraform Apply
      if: github.ref == 'refs/heads/sbx' && github.event_name == 'push'
      run: terraform apply tfplan -auto-approve